
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `ts`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=AS-GUY-MBP;Initial Catalog=TimesheetDB;Integrated Security=True;Connect Timeout=15;Encrypt=False;TrustServerCertificate=False`
//     Schema:                 `dbo`
//     Include Views:          `True`

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using NPoco;

namespace TimeSheet.Models
{
	public partial class tsDB : Database
	{
		public tsDB() 
			: base("ts")
		{
			CommonConstruct();
		}

		public tsDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			tsDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static tsDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new tsDB();
        }

		[ThreadStatic] static tsDB _instance;
		
        protected override void OnBeginTransaction()
        {
                if (_instance==null)
                        _instance=this;
        }
                
        protected override void OnCompleteTransaction()
        {
                if (_instance==this)
                        _instance=null;
        }
				        
		public class Record<T> where T:new()
		{
			public static tsDB repo { get { return tsDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew<T>(this); }
			public object Insert() { return repo.Insert(this); }
			public void Save() { repo.Save<T>(this); }
			public int Update() { return repo.Update(this); }
			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefaultById<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.SingleById<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
		}
	}
	

	[TableName("CostCenter")]
	[PrimaryKey("CostCenterId")]
	[ExplicitColumns]
    public partial class CostCenter : tsDB.Record<CostCenter>  
    {		
		[Column] public int CostCenterId { get; set; } 		
		[Column("CostCenter")] public string _CostCenter { get; set; }
		
		[Column] public string LegalEntity { get; set; } 	
	}

	[TableName("Customer")]
	[PrimaryKey("CustomerId")]
	[ExplicitColumns]
    public partial class Customer : tsDB.Record<Customer>  
    {		
		[Column] public int CustomerId { get; set; } 		
		[Column] public int WorkerId { get; set; } 		
		[Column] public string CustomerName { get; set; } 	
	}

	[TableName("Description")]
	[PrimaryKey("DescriptionId")]
	[ExplicitColumns]
    public partial class Description : tsDB.Record<Description>  
    {		
		[Column] public int DescriptionId { get; set; } 		
		[Column] public int WorkerId { get; set; } 		
		[Column("Description")] public string _Description { get; set; }
		
		[Column] public string AccountNumber { get; set; } 		
		[Column] public int HashCode { get; set; } 		
		[Column] public bool IsActive { get; set; } 		
		[Column] public DateTime? DateLastUsed { get; set; } 	
	}

	[TableName("Facility")]
	[PrimaryKey("FacilityId")]
	[ExplicitColumns]
    public partial class Facility : tsDB.Record<Facility>  
    {		
		[Column] public int FacilityId { get; set; } 		
		[Column("Facility")] public string _Facility { get; set; }
		
		[Column] public string AccountsPayableID { get; set; } 	
	}

	[TableName("InternalNumber")]
	[PrimaryKey("InternalNumberId")]
	[ExplicitColumns]
    public partial class InternalNumber : tsDB.Record<InternalNumber>  
    {		
		[Column] public int InternalNumberId { get; set; } 		
		[Column] public string InternalOrder { get; set; } 		
		[Column] public string LegalEntity { get; set; } 	
	}

	[TableName("Level")]
	[PrimaryKey("LevelId")]
	[ExplicitColumns]
    public partial class Level : tsDB.Record<Level>  
    {		
		[Column] public int LevelId { get; set; } 		
		[Column("Level")] public string _Level { get; set; }
		
		[Column] public decimal RegularRate { get; set; } 		
		[Column] public decimal OvertimeRate { get; set; } 	
	}

	[TableName("Partner")]
	[PrimaryKey("PartnerId")]
	[ExplicitColumns]
    public partial class Partner : tsDB.Record<Partner>  
    {		
		[Column] public int PartnerId { get; set; } 		
		[Column("Partner")] public string _Partner { get; set; }
	
	}

	[TableName("Role")]
	[PrimaryKey("RoleId")]
	[ExplicitColumns]
    public partial class Role : tsDB.Record<Role>  
    {		
		[Column] public int RoleId { get; set; } 		
		[Column("Role")] public string _Role { get; set; }
	
	}

	[TableName("Site")]
	[PrimaryKey("SiteId")]
	[ExplicitColumns]
    public partial class Site : tsDB.Record<Site>  
    {		
		[Column] public int SiteId { get; set; } 		
		[Column("Site")] public string _Site { get; set; }
		
		[Column] public string SiteName { get; set; } 	
	}

	[TableName("Week")]
	[PrimaryKey("WeekId")]
	[ExplicitColumns]
    public partial class Week : tsDB.Record<Week>  
    {		
		[Column] public int WeekId { get; set; } 		
		[Column] public int WeekNumber { get; set; } 		
		[Column] public int Year { get; set; } 		
		[Column] public int WorkerId { get; set; } 		
		[Column] public int DescriptionId { get; set; } 		
		[Column] public string Comments { get; set; } 		
		[Column] public bool IsOvertime { get; set; } 		
		[Column] public decimal? Monday { get; set; } 		
		[Column] public decimal? Tuesday { get; set; } 		
		[Column] public decimal? Wednesday { get; set; } 		
		[Column] public decimal? Thursday { get; set; } 		
		[Column] public decimal? Friday { get; set; } 		
		[Column] public decimal? Saturday { get; set; } 		
		[Column] public decimal? Sunday { get; set; } 		
		[Column] public DateTime? Submitted { get; set; } 		
		[Column] public bool NewRequest { get; set; } 		
		[Column] public int? SiteId { get; set; } 		
		[Column] public int? WorkAreaId { get; set; } 		
		[Column] public int? PartnerId { get; set; } 		
		[Column] public int? InternalNumberId { get; set; } 		
		[Column] public int? CostCenterId { get; set; } 		
		[Column] public string CapitalNumber { get; set; } 		
		[Column] public int? CustomerId { get; set; } 		
		[Column] public int? AccountType { get; set; } 	
	}

	[TableName("WorkArea")]
	[PrimaryKey("WorkAreaId")]
	[ExplicitColumns]
    public partial class WorkArea : tsDB.Record<WorkArea>  
    {		
		[Column] public int WorkAreaId { get; set; } 		
		[Column("WorkArea")] public string _WorkArea { get; set; }
	
	}

	[TableName("WorkDept")]
	[PrimaryKey("WorkDeptId")]
	[ExplicitColumns]
    public partial class WorkDept : tsDB.Record<WorkDept>  
    {		
		[Column] public int WorkDeptId { get; set; } 		
		[Column("WorkDept")] public string _WorkDept { get; set; }
		
		[Column] public string WorkDeptDesc { get; set; } 		
		[Column] public int? ProcessId { get; set; } 	
	}

	[TableName("Worker")]
	[PrimaryKey("WorkerId")]
	[ExplicitColumns]
    public partial class Worker : tsDB.Record<Worker>  
    {		
		[Column] public int WorkerId { get; set; } 		
		[Column] public string EmployeeNumber { get; set; } 		
		[Column] public int? LevelId { get; set; } 		
		[Column] public int? WorkDeptId { get; set; } 		
		[Column] public int? FacilityId { get; set; } 		
		[Column] public int? RoleId { get; set; } 		
		[Column] public string FirstName { get; set; } 		
		[Column] public string LastName { get; set; } 		
		[Column] public bool IsManager { get; set; } 		
		[Column] public bool IsActive { get; set; } 		
		[Column] public bool IsPartTime { get; set; } 		
		[Column] public bool OnDisability { get; set; } 		
		[Column] public string IonName { get; set; } 	
	}

	[TableName("__RefactorLog")]
	[PrimaryKey("OperationKey", AutoIncrement=false)]
	[ExplicitColumns]
    public partial class __RefactorLog : tsDB.Record<__RefactorLog>  
    {		
		[Column] public Guid OperationKey { get; set; } 	
	}

	[TableName("HoursByWeek")]
	[ExplicitColumns]
    public partial class HoursByWeek : tsDB.Record<HoursByWeek>  
    {		
		[Column] public int WeekId { get; set; } 		
		[Column] public string AccountNumber { get; set; } 		
		[Column] public decimal? WeekHours { get; set; } 		
		[Column] public int WorkerId { get; set; } 		
		[Column] public int? SiteId { get; set; } 		
		[Column] public int? PartnerId { get; set; } 		
		[Column] public int? WorkAreaId { get; set; } 		
		[Column] public int? accounttype { get; set; } 		
		[Column] public bool IsOvertime { get; set; } 		
		[Column] public decimal? WeekAmount { get; set; } 		
		[Column] public string FullName { get; set; } 		
		[Column] public bool NewRequest { get; set; } 		
		[Column] public int WeekNumber { get; set; } 		
		[Column] public int Year { get; set; } 		
		[Column] public int? YearWeek { get; set; } 	
	}

}



